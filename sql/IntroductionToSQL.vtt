WEBVTT

00:00:00.000 --> 00:00:01.000
Hi, everyone.

00:00:02.000 --> 00:00:07.000
In this tutorial, we'll learn more about the basics of SQL or SQL.

00:00:08.000 --> 00:00:10.000
SQL is nothing but structured.

00:00:10.000 --> 00:00:14.000
Query language. It's a language for managing and querying

00:00:14.000 --> 00:00:19.000
relational databases. OMOP database is a relational database,

00:00:20.000 --> 00:00:23.000
and you can use SQL to extract the data that is stored in it.

00:00:25.000 --> 00:00:32.000
So let us go over a quick refresher on what are the different clauses that are used in SQL queries.

00:00:34.000 --> 00:00:36.000
The first one is the SELECT clause,

00:00:37.000 --> 00:00:38.000
which is nothing but you list

00:00:38.000 --> 00:00:41.000
the columns that you want to retrieve. The FROM

00:00:41.000 --> 00:00:46.000
clause where you specify the table that you want to query. WHERE clause,

00:00:47.000 --> 00:00:50.000
which is used to filter the rules based on a certain condition.

00:00:52.000 --> 00:00:56.000
The HAVING clause, which filters groups based on a condition

00:00:57.000 --> 00:00:59.000
and it is often used with aggregate functions.

00:01:01.000 --> 00:01:07.000
GROUP BY clause where you group rows sharing a property and it is often used for aggregate functions.

00:01:09.000 --> 00:01:12.000
The ORDER BY clause, which sorts the results by one or more columns.

00:01:14.000 --> 00:01:17.000
So this is how a query looks like

00:01:18.000 --> 00:01:24.000
where you specify the column names in front of the SELECT query from this particular table_name where,

00:01:25.000 --> 00:01:33.000
this particular condition is satisfied and you order by based on a certain column value or multiple column values. 

00:01:35.000 --> 00:01:37.000
The key OMOP tables are person, condition

00:01:38.000 --> 00:01:39.000
occurrence, drug exposure,

00:01:40.000 --> 00:01:41.000
observation, visit

00:01:41.000 --> 00:01:43.000
occurrence and many more.

00:01:46.000 --> 00:01:53.000
So let us see an example of what it looks like and how you can use SQL query to fetch the data that you want.

00:01:54.000 --> 00:01:55.000
So in this query,

00:01:57.000 --> 00:02:05.000
I'm fetching the person_id, the gender_concept_id, year_of_birth and the race_concept_id from the person table and 

00:02:05.000 --> 00:02:09.000
I have the condition that the year of birth should be greater than or equal to 1950.

00:02:11.000 --> 00:02:13.000
So if I select this and run it,

00:02:14.000 --> 00:02:19.000
you can see that we have got this particular result where we have the person_id, gender_concept_id,

00:02:19.000 --> 00:02:24.000
year of birth and the race concept ID and the corresponding values.

00:02:26.000 --> 00:02:32.000
So those of you who are not familiar with concept_id, so it is used in OMOP to reference the standardised values.

00:02:34.000 --> 00:02:38.000
For example, gender_concept_id refers to a code for a patient's gender.

00:02:41.000 --> 00:02:47.000
Let us look at another query to find all the patients diagnosed with a specific condition.

00:02:47.000 --> 00:02:48.000
Example, Hypertension.

00:02:49.000 --> 00:02:52.000
So here I have specified the columns that I want to retrieve.

00:02:52.000 --> 00:02:53.000
Person ID condition,

00:02:54.000 --> 00:02:56.000
concept ID and the condition start date.

00:02:57.000 --> 00:03:05.000
I want these columns from the condition Occurrence table and I have specified that the condition_concept_ID should be 31967 which 

00:03:05.000 --> 00:03:06.000
is corresponding to hypertension.

00:03:08.000 --> 00:03:11.000
So if I select this query and run it,

00:03:13.000 --> 00:03:21.000
we can see that this is the person ID and the condition of hypertension started on these particular dates 

00:03:22.000 --> 00:03:25.000
and this is the condition concept ID for hypertension for all of them.

00:03:27.000 --> 00:03:32.000
The next query we have it identifies patients prescribed a certain drug,

00:03:32.000 --> 00:03:33.000
for example insulin.

00:03:35.000 --> 00:03:38.000
So I have selected I want the tables person ID,

00:03:38.000 --> 00:03:40.000
the drug concept ID,

00:03:41.000 --> 00:03:49.000
the Drug Exposure start date and the drug type concept ID and I want all these columns which are present 

00:03:49.000 --> 00:03:50.000
in the drug exposure table.

00:03:51.000 --> 00:03:53.000
So once I run it,

00:03:55.000 --> 00:03:56.000
I get the corresponding query.

00:03:57.000 --> 00:03:59.000
Now let's look at what are aggregate functions.

00:04:02.000 --> 00:04:03.000
So we have some functions

00:04:04.000 --> 00:04:07.000
For example, count, sum, average, minimum, maximum,

00:04:08.000 --> 00:04:09.000
which I call these aggregate functions,

00:04:10.000 --> 00:04:14.000
and they are aggregate across different multiple roles,

00:04:15.000 --> 00:04:16.000
multiple rows in a table.

00:04:17.000 --> 00:04:21.000
So if I want to count the number of anaemia diagnoses per year,

00:04:22.000 --> 00:04:26.000
there is no particular count of the number of diagnosis in any of our tables.

00:04:27.000 --> 00:04:35.000
So we have the query where I'm extracting the year from the condition_start_date and 

00:04:35.000 --> 00:04:39.000
I'm aliasing it as year and the Count Star,

00:04:39.000 --> 00:04:45.000
which is counting the number of rows having this particular year has the diagnosis count.

00:04:47.000 --> 00:04:48.000
This data is fetched from condition

00:04:48.000 --> 00:04:49.000
occurrence table with condition

00:04:50.000 --> 00:04:52.000
concept ID corresponding to that of anaemia.

00:04:53.000 --> 00:04:54.000
I want to group by,

00:04:56.000 --> 00:04:58.000
using the term

00:04:59.000 --> 00:05:07.000
year and I want to count all the rows that have this particular year and I'll use the ORDER BY clause for 

00:05:08.000 --> 00:05:10.000
year in an ascending order.

00:05:11.000 --> 00:05:15.000
So if I run this, I can see that in 1918 there was one diagnosis count.

00:05:16.000 --> 00:05:18.000
In 1930 there were 13 patients,

00:05:18.000 --> 00:05:20.000
a 13 diagnosis and so on.

